{"ast":null,"code":"var _jsxFileName = \"G:\\\\My 2025\\\\Study\\\\Pawprint-Dogcare-main\\\\Pawprint-Dogcare-main\\\\Client\\\\src\\\\Components\\\\VetRegiForm.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n\n//         } else {\n//           console.error('Error storing data:', response.statusText);\n//         }\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [serverError, setServerError] = useState(''); // State for server error messages\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n//           setServerError(''); // Clear any previous server errors\n//         } else {\n//           const errorData = await response.json();\n//           setServerError(errorData.error || 'Error registering veterinarian');\n//         }\n//       } catch (error) {\n//         setServerError('Failed to connect to the server. Please try again.');\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               {serverError && <div className=\"text-danger\">{serverError}</div>} {/* Display server error here */}\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './VetRegiForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VetManagement() {\n  _s();\n  const [values, setValues] = useState({\n    vetName: '',\n    vetEmail: '',\n    vetSpecialization: '',\n    vetPhone: '',\n    clinic: '',\n    userID: ''\n  });\n  const [vetID, setVetID] = useState('');\n  const [errors, setErrors] = useState({});\n  const [serverError, setServerError] = useState('');\n  const navigate = useNavigate();\n  const handleInput = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setValues(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const validateInputs = values => {\n    let errors = {};\n    if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n    if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n    if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n    if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n    if (!values.clinic) errors.clinic = 'Clinic Name is required';\n    if (!values.userID) errors.userID = 'User ID is required';\n    return errors;\n  };\n  const handleRegister = async event => {\n    event.preventDefault();\n    const validationErrors = validateInputs(values);\n    setErrors(validationErrors);\n    if (Object.keys(validationErrors).length === 0) {\n      try {\n        const response = await fetch('http://localhost:8800/api/vet/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(values)\n        });\n        if (response.ok) {\n          alert('Veterinarian registered successfully');\n          setServerError('');\n        } else {\n          const errorData = await response.json();\n          setServerError(errorData.error || 'Error registering veterinarian');\n        }\n      } catch (error) {\n        setServerError('Failed to connect to the server. Please try again.');\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleUpdate = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/update/${vetID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      });\n      if (response.ok) {\n        alert('Veterinarian updated successfully');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error updating veterinarian');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n  const handleDelete = async () => {\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/delete/${vetID}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        alert('Veterinarian deleted successfully');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error deleting veterinarian');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"registration-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"welcome-message\",\n        children: \"Manage Veterinarian Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleRegister,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Register Veterinarian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleUpdate,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Update Veterinarian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Vet ID\",\n          onChange: e => setVetID(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          handleDelete();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Delete Veterinarian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Vet ID\",\n          onChange: e => setVetID(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 5\n  }, this);\n}\n_s(VetManagement, \"LeIW71n+w59XMvhqU+8IKIwczHU=\", false, function () {\n  return [useNavigate];\n});\n_c = VetManagement;\nexport default VetManagement;\nvar _c;\n$RefreshReg$(_c, \"VetManagement\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","VetManagement","_s","values","setValues","vetName","vetEmail","vetSpecialization","vetPhone","clinic","userID","vetID","setVetID","errors","setErrors","serverError","setServerError","navigate","handleInput","event","name","value","target","prev","validateInputs","handleRegister","preventDefault","validationErrors","Object","keys","length","response","fetch","method","headers","body","JSON","stringify","ok","alert","errorData","json","error","console","handleUpdate","handleDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","e","required","_c","$RefreshReg$"],"sources":["G:/My 2025/Study/Pawprint-Dogcare-main/Pawprint-Dogcare-main/Client/src/Components/VetRegiForm.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n         \n//         } else {\n//           console.error('Error storing data:', response.statusText);\n//         }\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [serverError, setServerError] = useState(''); // State for server error messages\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n//           setServerError(''); // Clear any previous server errors\n//         } else {\n//           const errorData = await response.json();\n//           setServerError(errorData.error || 'Error registering veterinarian');\n//         }\n//       } catch (error) {\n//         setServerError('Failed to connect to the server. Please try again.');\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               {serverError && <div className=\"text-danger\">{serverError}</div>} {/* Display server error here */}\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\n\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './VetRegiForm.css';\n\nfunction VetManagement() {\n  const [values, setValues] = useState({\n    vetName: '',\n    vetEmail: '',\n    vetSpecialization: '',\n    vetPhone: '',\n    clinic: '',\n    userID: ''\n  });\n  \n  const [vetID, setVetID] = useState('');\n  const [errors, setErrors] = useState({});\n  const [serverError, setServerError] = useState('');\n  const navigate = useNavigate();\n\n  const handleInput = (event) => {\n    const { name, value } = event.target;\n    setValues((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const validateInputs = (values) => {\n    let errors = {};\n    if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n    if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n    if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n    if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n    if (!values.clinic) errors.clinic = 'Clinic Name is required';\n    if (!values.userID) errors.userID = 'User ID is required';\n    return errors;\n  };\n\n  const handleRegister = async (event) => {\n    event.preventDefault();\n    const validationErrors = validateInputs(values);\n    setErrors(validationErrors);\n\n    if (Object.keys(validationErrors).length === 0) {\n      try {\n        const response = await fetch('http://localhost:8800/api/vet/register', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(values)\n        });\n\n        if (response.ok) {\n          alert('Veterinarian registered successfully');\n          setServerError('');\n        } else {\n          const errorData = await response.json();\n          setServerError(errorData.error || 'Error registering veterinarian');\n        }\n      } catch (error) {\n        setServerError('Failed to connect to the server. Please try again.');\n        console.error('Error:', error);\n      }\n    }\n  };\n\n  const handleUpdate = async (event) => {\n    event.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/update/${vetID}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(values)\n      });\n      \n      if (response.ok) {\n        alert('Veterinarian updated successfully');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error updating veterinarian');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/delete/${vetID}`, {\n        method: 'DELETE'\n      });\n      \n      if (response.ok) {\n        alert('Veterinarian deleted successfully');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error deleting veterinarian');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"registration-content\">\n        <h1 className=\"welcome-message\">Manage Veterinarian Records</h1>\n\n        {/* Registration Form */}\n        <form onSubmit={handleRegister}>\n          <h2>Register Veterinarian</h2>\n          {/* Input Fields */}\n          <button type=\"submit\">Register</button>\n        </form>\n\n        {/* Update Form */}\n        <form onSubmit={handleUpdate}>\n          <h2>Update Veterinarian</h2>\n          <input type=\"text\" placeholder=\"Enter Vet ID\" onChange={(e) => setVetID(e.target.value)} required />\n          {/* Input Fields */}\n          <button type=\"submit\">Update</button>\n        </form>\n\n        {/* Delete Form */}\n        <form onSubmit={(e) => { e.preventDefault(); handleDelete(); }}>\n          <h2>Delete Veterinarian</h2>\n          <input type=\"text\" placeholder=\"Enter Vet ID\" onChange={(e) => setVetID(e.target.value)} required />\n          <button type=\"submit\">Delete</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default VetManagement;\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}