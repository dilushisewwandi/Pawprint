{"ast":null,"code":"var _jsxFileName = \"G:\\\\My 2025\\\\Study\\\\Pawprint-Dogcare-main\\\\Pawprint-Dogcare-main\\\\Client\\\\src\\\\Components\\\\VetRegiForm.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n\n//         } else {\n//           console.error('Error storing data:', response.statusText);\n//         }\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [serverError, setServerError] = useState(''); // State for server error messages\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n//           setServerError(''); // Clear any previous server errors\n//         } else {\n//           const errorData = await response.json();\n//           setServerError(errorData.error || 'Error registering veterinarian');\n//         }\n//       } catch (error) {\n//         setServerError('Failed to connect to the server. Please try again.');\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               {serverError && <div className=\"text-danger\">{serverError}</div>} {/* Display server error here */}\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './VetRegiForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VetManagement() {\n  _s();\n  const [values, setValues] = useState({\n    vetName: '',\n    vetEmail: '',\n    vetSpecialization: '',\n    vetPhone: '',\n    clinic: '',\n    userID: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [serverError, setServerError] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const validationErrors = validateInputs(values);\n    setErrors(validationErrors);\n    if (Object.keys(validationErrors).length === 0) {\n      try {\n        const response = await fetch('http://localhost:8800/api/vet/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(values)\n        });\n        if (response.ok) {\n          alert('Veterinarian registered successfully');\n          setServerError('');\n        } else {\n          const errorData = await response.json();\n          setServerError(errorData.error || 'Error registering veterinarian');\n        }\n      } catch (error) {\n        setServerError('Failed to connect to the server. Please try again.');\n        console.error('Error:', error);\n      }\n    }\n  };\n  const handleUpdate = async event => {\n    event.preventDefault();\n    if (!values.userID) {\n      setServerError('User ID is required for updating.');\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/update/${values.userID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      });\n      if (response.ok) {\n        alert('Veterinarian details updated successfully');\n        setServerError('');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error updating veterinarian details');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n  const handleDelete = async () => {\n    if (!values.userID) {\n      setServerError('User ID is required for deleting.');\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/delete/${values.userID}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        alert('Veterinarian deleted successfully');\n        setValues({\n          vetName: '',\n          vetEmail: '',\n          vetSpecialization: '',\n          vetPhone: '',\n          clinic: '',\n          userID: ''\n        });\n        setServerError('');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error deleting veterinarian');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n  const handleInput = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setValues(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const validateInputs = values => {\n    let errors = {};\n    if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n    if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n    if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n    if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n    if (!values.clinic) errors.clinic = 'Clinic Name is required';\n    if (!values.userID) errors.userID = 'User ID is required';\n    return errors;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"registration-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"welcome-message\",\n        children: \"Veterinarian Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"registration-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"registration-card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"regi-form-name\",\n            children: \"Manage Veterinarians\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"vetName\",\n              value: values.vetName,\n              onChange: handleInput,\n              placeholder: \"Vet Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              name: \"vetEmail\",\n              value: values.vetEmail,\n              onChange: handleInput,\n              placeholder: \"Vet Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"vetSpecialization\",\n              value: values.vetSpecialization,\n              onChange: handleInput,\n              placeholder: \"Specialization\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"vetPhone\",\n              value: values.vetPhone,\n              onChange: handleInput,\n              placeholder: \"Phone\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"clinic\",\n              value: values.clinic,\n              onChange: handleInput,\n              placeholder: \"Clinic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"userID\",\n              value: values.userID,\n              onChange: handleInput,\n              placeholder: \"User ID (Required)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 15\n            }, this), serverError && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-danger\",\n              children: serverError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleUpdate,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleDelete,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 457,\n    columnNumber: 5\n  }, this);\n}\n_s(VetManagement, \"rrq61Aq1BEopiAgChtk0U4caFqQ=\", false, function () {\n  return [useNavigate];\n});\n_c = VetManagement;\nexport default VetManagement;\nvar _c;\n$RefreshReg$(_c, \"VetManagement\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","VetManagement","_s","values","setValues","vetName","vetEmail","vetSpecialization","vetPhone","clinic","userID","errors","setErrors","serverError","setServerError","navigate","handleSubmit","event","preventDefault","validationErrors","validateInputs","Object","keys","length","response","fetch","method","headers","body","JSON","stringify","ok","alert","errorData","json","error","console","handleUpdate","handleDelete","handleInput","name","value","target","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["G:/My 2025/Study/Pawprint-Dogcare-main/Pawprint-Dogcare-main/Client/src/Components/VetRegiForm.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n         \n//         } else {\n//           console.error('Error storing data:', response.statusText);\n//         }\n//       } catch (error) {\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\n\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import './VetRegiForm.css'; \n\n// function VetRegiForm() {\n//   const [values, setValues] = useState({\n//     vetName: '',\n//     vetEmail: '',\n//     vetSpecialization: '',\n//     vetPhone: '',\n//     clinic: '',\n//     userID: ''\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [serverError, setServerError] = useState(''); // State for server error messages\n//   const navigate = useNavigate(); \n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const validationErrors = validateInputs(values);\n//     setErrors(validationErrors);\n\n//     if (Object.keys(validationErrors).length === 0) {\n//       try {\n//         const response = await fetch('http://localhost:8800/api/vet/register', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(values)\n//         });\n\n//         if (response.ok) {\n//           alert('Veterinarian registered successfully');\n//           setServerError(''); // Clear any previous server errors\n//         } else {\n//           const errorData = await response.json();\n//           setServerError(errorData.error || 'Error registering veterinarian');\n//         }\n//       } catch (error) {\n//         setServerError('Failed to connect to the server. Please try again.');\n//         console.error('Error:', error);\n//       }\n//     }\n//   };\n\n//   const handleInput = (event) => {\n//     const { name, value } = event.target;\n//     setValues(prev => ({ ...prev, [name]: value }));\n//   };\n\n//   const validateInputs = (values) => {\n//     let errors = {};\n//     if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n//     if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n//     if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n//     if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n//     if (!values.clinic) errors.clinic = 'Clinic Name is required';\n//     if (!values.userID) errors.userID = 'User ID is required';\n//     return errors;\n//   };\n\n//   const backgroundStyle = {\n//     backgroundImage: \"url('/images/login1.jpg')\",\n//     backgroundSize: 'cover',\n//     backgroundPosition: 'center',\n//     minHeight: '100vh',\n//     display: 'flex',\n//     alignItems: 'center',\n//     justifyContent: 'center'\n//   };\n\n//   return (\n//     <div className=\"form-container\" style={backgroundStyle}>\n//       <div className=\"registration-content\">\n//         <h1 className=\"welcome-message\">Join Our Veterinary Network</h1>\n//         <div className=\"registration-card\">\n//           <div className=\"registration-card-body\">\n//             <h2 className=\"regi-form-name\">Veterinarian Registration</h2>\n//             <form onSubmit={handleSubmit}>\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetName\">Vet Name</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetName\"\n//                   value={values.vetName}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Name\"\n//                 />\n//                 {errors.vetName && <span className=\"text-danger\">{errors.vetName}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetEmail\">Vet Email</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"vetEmail\"\n//                   value={values.vetEmail}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Veterinarian Email\"\n//                 />\n//                 {errors.vetEmail && <span className=\"text-danger\">{errors.vetEmail}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetSpecialization\">Specialization</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetSpecialization\"\n//                   value={values.vetSpecialization}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Specialization\"\n//                 />\n//                 {errors.vetSpecialization && <span className=\"text-danger\">{errors.vetSpecialization}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"vetPhone\">Vet Phone</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"vetPhone\"\n//                   value={values.vetPhone}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Phone\"\n//                 />\n//                 {errors.vetPhone && <span className=\"text-danger\">{errors.vetPhone}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"clinic\">Vet Clinic</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"clinic\"\n//                   value={values.clinic}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter Clinic\"\n//                 />\n//                 {errors.clinic && <span className=\"text-danger\">{errors.clinic}</span>}\n//               </div>\n\n//               <div className=\"form-group\">\n//                 <label htmlFor=\"userID\">User ID</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"userID\"\n//                   value={values.userID}\n//                   onChange={handleInput}\n//                   required\n//                   placeholder=\"Enter User ID\"\n//                 />\n//                 {errors.userID && <span className=\"text-danger\">{errors.userID}</span>}\n//               </div>\n\n//               {serverError && <div className=\"text-danger\">{serverError}</div>} {/* Display server error here */}\n\n//               <button type=\"submit\" className='vet-regi-submit'>Register</button>\n//             </form>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default VetRegiForm;\n\n\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './VetRegiForm.css'; \n\nfunction VetManagement() {\n  const [values, setValues] = useState({\n    vetName: '',\n    vetEmail: '',\n    vetSpecialization: '',\n    vetPhone: '',\n    clinic: '',\n    userID: ''\n  });\n\n  const [errors, setErrors] = useState({});\n  const [serverError, setServerError] = useState('');\n  const navigate = useNavigate();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const validationErrors = validateInputs(values);\n    setErrors(validationErrors);\n\n    if (Object.keys(validationErrors).length === 0) {\n      try {\n        const response = await fetch('http://localhost:8800/api/vet/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(values)\n        });\n\n        if (response.ok) {\n          alert('Veterinarian registered successfully');\n          setServerError('');\n        } else {\n          const errorData = await response.json();\n          setServerError(errorData.error || 'Error registering veterinarian');\n        }\n      } catch (error) {\n        setServerError('Failed to connect to the server. Please try again.');\n        console.error('Error:', error);\n      }\n    }\n  };\n\n  const handleUpdate = async (event) => {\n    event.preventDefault();\n    if (!values.userID) {\n      setServerError('User ID is required for updating.');\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/update/${values.userID}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      });\n      if (response.ok) {\n        alert('Veterinarian details updated successfully');\n        setServerError('');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error updating veterinarian details');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (!values.userID) {\n      setServerError('User ID is required for deleting.');\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:8800/api/vet/delete/${values.userID}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        alert('Veterinarian deleted successfully');\n        setValues({ vetName: '', vetEmail: '', vetSpecialization: '', vetPhone: '', clinic: '', userID: '' });\n        setServerError('');\n      } else {\n        const errorData = await response.json();\n        setServerError(errorData.error || 'Error deleting veterinarian');\n      }\n    } catch (error) {\n      setServerError('Failed to connect to the server. Please try again.');\n      console.error('Error:', error);\n    }\n  };\n\n  const handleInput = (event) => {\n    const { name, value } = event.target;\n    setValues(prev => ({ ...prev, [name]: value }));\n  };\n\n  const validateInputs = (values) => {\n    let errors = {};\n    if (!values.vetName) errors.vetName = 'Veterinarian Name is required';\n    if (!values.vetEmail) errors.vetEmail = 'Veterinarian Email is required';\n    if (!values.vetSpecialization) errors.vetSpecialization = 'Specialization is required';\n    if (!values.vetPhone) errors.vetPhone = 'Veterinarian Phone is required';\n    if (!values.clinic) errors.clinic = 'Clinic Name is required';\n    if (!values.userID) errors.userID = 'User ID is required';\n    return errors;\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"registration-content\">\n        <h1 className=\"welcome-message\">Veterinarian Management</h1>\n        <div className=\"registration-card\">\n          <div className=\"registration-card-body\">\n            <h2 className=\"regi-form-name\">Manage Veterinarians</h2>\n            <form onSubmit={handleSubmit}>\n              <input type=\"text\" name=\"vetName\" value={values.vetName} onChange={handleInput} placeholder=\"Vet Name\" />\n              <input type=\"email\" name=\"vetEmail\" value={values.vetEmail} onChange={handleInput} placeholder=\"Vet Email\" />\n              <input type=\"text\" name=\"vetSpecialization\" value={values.vetSpecialization} onChange={handleInput} placeholder=\"Specialization\" />\n              <input type=\"text\" name=\"vetPhone\" value={values.vetPhone} onChange={handleInput} placeholder=\"Phone\" />\n              <input type=\"text\" name=\"clinic\" value={values.clinic} onChange={handleInput} placeholder=\"Clinic\" />\n              <input type=\"text\" name=\"userID\" value={values.userID} onChange={handleInput} placeholder=\"User ID (Required)\" />\n              {serverError && <div className=\"text-danger\">{serverError}</div>}\n              <button type=\"submit\">Register</button>\n              <button type=\"button\" onClick={handleUpdate}>Update</button>\n              <button type=\"button\" onClick={handleDelete}>Delete</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default VetManagement;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC;IACnCQ,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZC,iBAAiB,EAAE,EAAE;IACrBC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAMkB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9B,MAAMkB,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,gBAAgB,GAAGC,cAAc,CAACjB,MAAM,CAAC;IAC/CS,SAAS,CAACO,gBAAgB,CAAC;IAE3B,IAAIE,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;MAC9C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACrEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC3B,MAAM;QAC7B,CAAC,CAAC;QAEF,IAAIqB,QAAQ,CAACO,EAAE,EAAE;UACfC,KAAK,CAAC,sCAAsC,CAAC;UAC7ClB,cAAc,CAAC,EAAE,CAAC;QACpB,CAAC,MAAM;UACL,MAAMmB,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;UACvCpB,cAAc,CAACmB,SAAS,CAACE,KAAK,IAAI,gCAAgC,CAAC;QACrE;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdrB,cAAc,CAAC,oDAAoD,CAAC;QACpEsB,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;EACF,CAAC;EAED,MAAME,YAAY,GAAG,MAAOpB,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,CAACf,MAAM,CAACO,MAAM,EAAE;MAClBI,cAAc,CAAC,mCAAmC,CAAC;MACnD;IACF;IACA,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,wCAAuCtB,MAAM,CAACO,MAAO,EAAC,EAAE;QACpFgB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC3B,MAAM;MAC7B,CAAC,CAAC;MACF,IAAIqB,QAAQ,CAACO,EAAE,EAAE;QACfC,KAAK,CAAC,2CAA2C,CAAC;QAClDlB,cAAc,CAAC,EAAE,CAAC;MACpB,CAAC,MAAM;QACL,MAAMmB,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvCpB,cAAc,CAACmB,SAAS,CAACE,KAAK,IAAI,qCAAqC,CAAC;MAC1E;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdrB,cAAc,CAAC,oDAAoD,CAAC;MACpEsB,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACnC,MAAM,CAACO,MAAM,EAAE;MAClBI,cAAc,CAAC,mCAAmC,CAAC;MACnD;IACF;IACA,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,wCAAuCtB,MAAM,CAACO,MAAO,EAAC,EAAE;QACpFgB,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAIF,QAAQ,CAACO,EAAE,EAAE;QACfC,KAAK,CAAC,mCAAmC,CAAC;QAC1C5B,SAAS,CAAC;UAAEC,OAAO,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,iBAAiB,EAAE,EAAE;UAAEC,QAAQ,EAAE,EAAE;UAAEC,MAAM,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAG,CAAC,CAAC;QACrGI,cAAc,CAAC,EAAE,CAAC;MACpB,CAAC,MAAM;QACL,MAAMmB,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvCpB,cAAc,CAACmB,SAAS,CAACE,KAAK,IAAI,6BAA6B,CAAC;MAClE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdrB,cAAc,CAAC,oDAAoD,CAAC;MACpEsB,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAMI,WAAW,GAAItB,KAAK,IAAK;IAC7B,MAAM;MAAEuB,IAAI;MAAEC;IAAM,CAAC,GAAGxB,KAAK,CAACyB,MAAM;IACpCtC,SAAS,CAACuC,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACjD,CAAC;EAED,MAAMrB,cAAc,GAAIjB,MAAM,IAAK;IACjC,IAAIQ,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,CAACR,MAAM,CAACE,OAAO,EAAEM,MAAM,CAACN,OAAO,GAAG,+BAA+B;IACrE,IAAI,CAACF,MAAM,CAACG,QAAQ,EAAEK,MAAM,CAACL,QAAQ,GAAG,gCAAgC;IACxE,IAAI,CAACH,MAAM,CAACI,iBAAiB,EAAEI,MAAM,CAACJ,iBAAiB,GAAG,4BAA4B;IACtF,IAAI,CAACJ,MAAM,CAACK,QAAQ,EAAEG,MAAM,CAACH,QAAQ,GAAG,gCAAgC;IACxE,IAAI,CAACL,MAAM,CAACM,MAAM,EAAEE,MAAM,CAACF,MAAM,GAAG,yBAAyB;IAC7D,IAAI,CAACN,MAAM,CAACO,MAAM,EAAEC,MAAM,CAACD,MAAM,GAAG,qBAAqB;IACzD,OAAOC,MAAM;EACf,CAAC;EAED,oBACEX,OAAA;IAAK4C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7B7C,OAAA;MAAK4C,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACnC7C,OAAA;QAAI4C,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5DjD,OAAA;QAAK4C,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChC7C,OAAA;UAAK4C,SAAS,EAAC,wBAAwB;UAAAC,QAAA,gBACrC7C,OAAA;YAAI4C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAAC;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxDjD,OAAA;YAAMkD,QAAQ,EAAElC,YAAa;YAAA6B,QAAA,gBAC3B7C,OAAA;cAAOmD,IAAI,EAAC,MAAM;cAACX,IAAI,EAAC,SAAS;cAACC,KAAK,EAAEtC,MAAM,CAACE,OAAQ;cAAC+C,QAAQ,EAAEb,WAAY;cAACc,WAAW,EAAC;YAAU;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACzGjD,OAAA;cAAOmD,IAAI,EAAC,OAAO;cAACX,IAAI,EAAC,UAAU;cAACC,KAAK,EAAEtC,MAAM,CAACG,QAAS;cAAC8C,QAAQ,EAAEb,WAAY;cAACc,WAAW,EAAC;YAAW;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC7GjD,OAAA;cAAOmD,IAAI,EAAC,MAAM;cAACX,IAAI,EAAC,mBAAmB;cAACC,KAAK,EAAEtC,MAAM,CAACI,iBAAkB;cAAC6C,QAAQ,EAAEb,WAAY;cAACc,WAAW,EAAC;YAAgB;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACnIjD,OAAA;cAAOmD,IAAI,EAAC,MAAM;cAACX,IAAI,EAAC,UAAU;cAACC,KAAK,EAAEtC,MAAM,CAACK,QAAS;cAAC4C,QAAQ,EAAEb,WAAY;cAACc,WAAW,EAAC;YAAO;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACxGjD,OAAA;cAAOmD,IAAI,EAAC,MAAM;cAACX,IAAI,EAAC,QAAQ;cAACC,KAAK,EAAEtC,MAAM,CAACM,MAAO;cAAC2C,QAAQ,EAAEb,WAAY;cAACc,WAAW,EAAC;YAAQ;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACrGjD,OAAA;cAAOmD,IAAI,EAAC,MAAM;cAACX,IAAI,EAAC,QAAQ;cAACC,KAAK,EAAEtC,MAAM,CAACO,MAAO;cAAC0C,QAAQ,EAAEb,WAAY;cAACc,WAAW,EAAC;YAAoB;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,EAChHpC,WAAW,iBAAIb,OAAA;cAAK4C,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAEhC;YAAW;cAAAiC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAChEjD,OAAA;cAAQmD,IAAI,EAAC,QAAQ;cAAAN,QAAA,EAAC;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACvCjD,OAAA;cAAQmD,IAAI,EAAC,QAAQ;cAACG,OAAO,EAAEjB,YAAa;cAAAQ,QAAA,EAAC;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC5DjD,OAAA;cAAQmD,IAAI,EAAC,QAAQ;cAACG,OAAO,EAAEhB,YAAa;cAAAO,QAAA,EAAC;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/C,EAAA,CArIQD,aAAa;EAAA,QAYHH,WAAW;AAAA;AAAAyD,EAAA,GAZrBtD,aAAa;AAuItB,eAAeA,aAAa;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}